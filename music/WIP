#! /bin/bash
set -eo pipefail
IFS="$(printf '\n\t')"
cd "$(dirname "${BASH_SOURCE[0]}")"

#set -u

# ---- Definitions ----
# DB - sqlite db
# CSV - the CSV list of all the songs and what playlists they are in
# zip - From exportify, contains individual CSVs of the playlists
# PlaylistCSVs - the files inside the zip

DB=songs.db
CSV=songs.csv

fixUnescapedQuotesInCsv() {
	perl -n -i -e 's/(?<!",)"(?!,")/""/g; s/^""/"/g; s/""$/"/g; print;' "$1"
}

createDb() {
	sqlite3 "$DB" <<-EOF
	CREATE TABLE songs (
		playlist TEXT,
		filename TEXT,
		youtubeUrl TEXT,
		youtubeTitle TEXT,
		spotifyUri TEXT,
		title TEXT,
		artist TEXT,
		album TEXT,
		startTime TEXT,
		endTime TEXT,
		infoHash TEXT
	);
	EOF
}

importPlaylistCsvsToDb() {
	filename=$(basename -- "$1")
	playlist="${filename%.*}"

	sqlite3 "$DB" <<-EOF
	.mode csv
	.import "$1" import

	INSERT INTO songs 
		(playlist, filename, youtubeUrl, youtubeTitle, spotifyUri, title, artist, album, startTime, endTime, infoHash)
	SELECT "$playlist" AS playlist, "" AS filename, "" AS youtubeUrl, "" AS youtubeTitle, "Spotify URI", "Track Name", "Artist Name", "Album Name", "" AS startTime, "" AS endTime, "" AS infoHash
	FROM import;

	DROP TABLE import;
	EOF
}

dbToCsv() {
	sqlite3 "$DB" <<-EOF
	.headers on
	.mode csv
	.output "$CSV"
	SELECT * FROM songs;
	EOF
}

createCsvFromZip() {
	createDb
	tempFolder=$(mktemp -d)
	echo "Using temp dir $tempFolder"
	unzip "$1" -d "$tempFolder"
	for filepath in $(ls "$tempFolder"/*.csv); do
		fixUnescapedQuotesInCsv "$filepath"
		importPlaylistCsvsToDb "$filepath"
	done
	dbToCsv
	rm "$DB"
}

csvToDb() {
	sqlite3 "$DB" <<-EOF
	.mode csv
	.import "$CSV" songs
	EOF
}

downloadFromDb() {
	for id in $(sqlite3 "$DB" "SELECT rowid FROM songs;"); do
		downloadSongFromDbWithId $id
	done
}

whereIdIsSelectColumn() {
	sqlite3 "$DB" "SELECT \"$2\" FROM songs WHERE rowid = \"$1\";"
}

downloadSongFromDbWithId() {
	title=$(whereIdIsSelectColumn $1 title)
	artist=$(whereIdIsSelectColumn $1 artist)
	for column in playlist filename youtubeUrl youtubeTitle spotifyUri title artist album startTime endTime infoHash; do
		declare $column="$(whereIdIsSelectColumn $1 $column)"
	done
	echo "$title"
	[ -z "$youtubeUrl" ] && echo "Without youtubeUrl"
}

case "$1" in
	'')
		;;
	create)
		shift
		createCsvFromZip "$1"
		;;
	dbToCsv)
		dbToCsv
		;;
	csvToDb)
		csvToDb
		;;
	downloadFromDb)
		downloadFromDb
		;;
	*)
		echo Please specify: create, csvToDb, dbToCsv
		exit 1 ;;
esac

