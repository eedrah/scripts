#! /bin/bash
set -eo pipefail
IFS="$(printf '\n\t')"
cd "$(dirname "${BASH_SOURCE[0]}")"

#set -u

# ---- Definitions ----
# DB - sqlite db
# CSV - the CSV list of all the songs and what playlists they are in
# zip - From exportify, contains individual CSVs of the playlists
# PlaylistCSVs - the files inside the zip

DB=songs.db
CSV=songs.csv

md5hash() {
	if (type -a md5 &>/dev/null); then
		md5 -qs "$1"
	else
		echo -n "$1" | md5sum | cut -f 1 -d ' '
	fi
}
if [[ 098f6bcd4621d373cade4e832627b4f6 != $(md5hash test) ]]; then
	echo Hashing test failed! Received $(md5hash test)
	exit 1
fi

fixUnescapedQuotesInCsv() {
	perl -n -i -e 's/(?<!",)"(?!,")/""/g; s/^""/"/g; s/""$/"/g; print;' "$1"
}

createDb() {
	sqlite3 "$DB" <<-EOF
	CREATE TABLE songs (
		playlist TEXT,
		filename TEXT,
		youtubeId TEXT,
		youtubeTitle TEXT,
		spotifyUri TEXT,
		title TEXT,
		artist TEXT,
		album TEXT,
		startTime TEXT,
		endTime TEXT,
		infoHash TEXT
	);
	EOF
}

importPlaylistCsvsToDb() {
	filename=$(basename -- "$1")
	playlist="${filename%.*}"

	sqlite3 "$DB" <<-EOF
	.mode csv
	.import "$1" import

	INSERT INTO songs 
		(playlist, filename, youtubeId, youtubeTitle, spotifyUri, title, artist, album, startTime, endTime, infoHash)
	SELECT "$playlist" AS playlist, "" AS filename, "" AS youtubeId, "" AS youtubeTitle, "Spotify URI", "Track Name", "Artist Name", "Album Name", "" AS startTime, "" AS endTime, "" AS infoHash
	FROM import;

	DROP TABLE import;
	EOF
}

dbToCsv() {
	sqlite3 "$DB" <<-EOF
	.headers on
	.mode csv
	.output "$CSV"
	SELECT * FROM songs;
	EOF
}

createCsvFromZip() {
	createDb
	tempFolder=$(mktemp -d)
	echo "Using temp dir $tempFolder"
	unzip "$1" -d "$tempFolder"
	for filepath in $(ls "$tempFolder"/*.csv); do
		fixUnescapedQuotesInCsv "$filepath"
		importPlaylistCsvsToDb "$filepath"
	done
	dbToCsv
	rm "$DB"
}

csvToDb() {
	sqlite3 "$DB" <<-EOF
	.mode csv
	.import "$CSV" songs
	EOF
}

downloadFromDb() {
	for id in $(sqlite3 "$DB" "SELECT rowid FROM songs;"); do
		downloadSongFromDbWithId $id
	done
}

whereIdIsSelectColumn() {
	sqlite3 "$DB" "SELECT \"$2\" FROM songs WHERE rowid = \"$1\";"
}

downloadSongFromDbWithId() {
	title=$(whereIdIsSelectColumn $1 title)
	artist=$(whereIdIsSelectColumn $1 artist)
	for column in playlist filename youtubeId youtubeTitle spotifyUri title artist album startTime endTime infoHash; do
		declare $column="$(whereIdIsSelectColumn $1 $column)"
	done
	echo "$title"
	[ -z "$youtubeId" ] && echo "Without youtubeId"

	exec 5>&1
	data=$( youtube-dl --format bestaudio --audio-format mp3 --extract-audio --add-metadata --output '%(title)s.%(ext)s' --default-search ytsearch "lyrics $title $artist" | tee >(cat - >&5) )
	while IFS=' ' read -r tool step info; do
		if [ "$tool" == "[ffmpeg]" ] && [ "$step" == "Destination:" ]; then
			#newFilename=$( echo "$filename" | sed -r -e 's/ ?\(?lyrics\)? ?/ /i' -e 's/^ *//;s/ *\.mp3$/.mp3/' )
			#mv "$filename" "$newFilename"
			dlFileName="$info"
			echo "Filename: $dlFileName"
		elif [ "$tool" == "[youtube]" ] && [ "$info" == "Downloading webpage" ]; then
			dlYoutubeId=${step%:}
			echo "Id: $dlYoutubeId"
		fi
	done <<< "$data"
}

case "$1" in
	'')
		;;
	create)
		shift
		createCsvFromZip "$1"
		;;
	dbToCsv)
		dbToCsv
		;;
	csvToDb)
		csvToDb
		;;
	downloadFromZip)
		shift
		createCsvFromZip "$1"
		csvToDb
		downloadFromDb
		;;
	*)
		echo Please specify: create, csvToDb, dbToCsv, downloadFromZip
		exit 1 ;;
esac

